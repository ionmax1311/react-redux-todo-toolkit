{"version":3,"sources":["components/alert/Alert.js","redux/popup/reducer.js","redux/todo/reducer.js","redux/alert/reducer.js","components/popup/Popup.js","components/todo-input/TodoInput.js","components/todo-item/TodoItem.js","components/todo-list/TodoList.js","containers/Todo.js","redux/index.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","show","setShowAlert","alerts","useState","type","message","alert","setAlert","useEffect","length","className","onClick","popupSlice","createSlice","name","initialState","popup","reducers","openPopup","state","action","payload","closePopup","actions","todoSlice","todos","setTodo","deleteTodo","filter","todo","id","completeTodo","map","isCompleted","editTodo","alertSlice","push","removeAlert","Popup","onChange","setCurTodo","value","textPopup","curId","dispatch","useDispatch","editTodoItem","useSelector","handleClosePopup","defaultValue","style","marginRight","marginBottom","console","log","newTodos","task","text","TodoInput","placeholder","TodoItem","setCurId","TodoList","curTodo","taskTextPopup","handleShowPopup","item","Todo","taskText","setTaskText","setTaskTextPopup","items","showAlert","e","target","todoItem","Date","now","store","configureStore","reducer","todoReducer","popupReducer","alertReducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4f2de79.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../alert/alert.css\";\r\n\r\nexport const Alert = ({ show, setShowAlert, alerts }) => {\r\n\t//   const alerts = useSelector((state) => state.alert.alerts);\r\n\tconst [alert, setAlert] = useState({ type: \"\", message: \"\" });\r\n\t//   const [show, setShow] = useState(false);\r\n\t// console.log(\"alerts\", alerts);\r\n\t// console.log(\"show\", show);\r\n\tuseEffect(() => {\r\n\t\tif (alerts.length > 0) {\r\n\t\t\tsetAlert(alerts[alerts.length - 1]);\r\n\t\t\t//   setShow(true);\r\n\t\t\t// setTimeout(() => {\r\n\t\t\t//   setShow(false);\r\n\t\t\t// }, 3000);\r\n\t\t}\r\n\t}, [alerts]);\r\n\r\n\tconst onClose = () => {\r\n\t\tsetShowAlert(false);\r\n\t};\r\n\r\n\tconst color = alert.type === \"success\" ? \"teal\" : \"darkred\";\r\n\r\n\treturn show ? (\r\n\t\t<div className='alert'>\r\n\t\t\t{/* <div className={`${alert.type || \"error\"}`}> */}\r\n\t\t\t<div className={`${alert.type}`}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className='alert-message'>{alert.message || \"\"}</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<i onClick={onClose} className='material-icons close-alert'>\r\n\t\t\t\t\tclose\r\n\t\t\t\t</i>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t) : null;\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst popupSlice = createSlice({\r\n  name: \"popup\",\r\n  initialState: {\r\n    popup: false,\r\n  },\r\n  reducers: {\r\n    openPopup: (state, action) => {\r\n      state.popup = action.payload;\r\n    },\r\n    closePopup: (state, action) => {\r\n      state.popup = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { openPopup, closePopup } = popupSlice.actions;\r\nexport default popupSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState: {\r\n    todos: [],\r\n  },\r\n  reducers: {\r\n    setTodo: (state, action) => {\r\n      state.todos = [...state.todos, action.payload];\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\r\n    },\r\n    completeTodo: (state, action) => {\r\n      state.todos = state.todos.map((todo) => {\r\n        if (todo.id === action.payload.id) {\r\n          todo.isCompleted = !todo.isCompleted;\r\n        }\r\n        return todo;\r\n      });\r\n    },\r\n\r\n    editTodo: (state, action) => {\r\n      state.todos = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setTodo, deleteTodo, completeTodo, editTodo } =\r\n  todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst alertSlice = createSlice({\r\n\tname: \"alert\",\r\n\tinitialState: {\r\n\t\talerts: [],\r\n\t},\r\n\treducers: {\r\n\t\tsetAlert: (state, action) => {\r\n\t\t\tstate.alerts.push({\r\n\t\t\t\tmessage: action.payload.message,\r\n\t\t\t\ttype: action.payload.type,\r\n\t\t\t});\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { setAlert, removeAlert } = alertSlice.actions;\r\nexport default alertSlice.reducer;\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { closePopup } from \"../../redux/popup/reducer\";\r\nimport { editTodo } from \"../../redux/todo/reducer\";\r\nimport { setAlert } from \"../../redux/alert/reducer\";\r\nimport \"../popup/popup.css\";\r\n\r\nexport const Popup = ({\r\n\tshow,\r\n\tonChange,\r\n\tsetCurTodo,\r\n\tvalue,\r\n\ttextPopup,\r\n\tcurId,\r\n}) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst editTodoItem = useSelector((state) => state.todo.todos);\r\n\r\n\tconst handleClosePopup = () => {\r\n\t\tdispatch(closePopup(false));\r\n\t\tsetCurTodo(value);\r\n\t};\r\n\r\n\tconst sendEditTodo = () => {\r\n\t\tconsole.log(\"taskTextPopup\", textPopup);\r\n\r\n\t\tdispatch(closePopup(false));\r\n\r\n\t\tconst newTodos = editTodoItem.map((task) => {\r\n\t\t\tif (task.id === curId && textPopup.length > 0) {\r\n\t\t\t\treturn { ...task, text: textPopup };\r\n\t\t\t}\r\n\t\t\treturn task;\r\n\t\t});\r\n\r\n\t\t// setShowAlert(true);\r\n\t\tdispatch(\r\n\t\t\tsetAlert({\r\n\t\t\t\tmessage: \"Task updated! 👌\",\r\n\t\t\t\ttype: \"update\",\r\n\t\t\t\t// type: \"error\",\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tdispatch(editTodo(newTodos));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={!show ? \"popup\" : \"popup active\"}>\r\n\t\t\t<div className='popup-in'>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\tdefaultValue={value}\r\n\t\t\t\t\t// ref={inputRef}\r\n\t\t\t\t/>\r\n\t\t\t\t<i\r\n\t\t\t\t\tonClick={handleClosePopup}\r\n\t\t\t\t\tclassName='material-icons popup-close'>\r\n\t\t\t\t\tclose\r\n\t\t\t\t</i>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={handleClosePopup}\r\n\t\t\t\t\tstyle={{ marginRight: \"5px\", marginBottom: \"20px\" }}>\r\n\t\t\t\t\tCANCEL\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={sendEditTodo}>SEND</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport \"./todo-input.css\";\r\n\r\nexport const TodoInput = ({ value, onChange }) => {\r\n  return (\r\n    <div className=\"todo-input\">\r\n      <input\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        value={value}\r\n        placeholder=\"Add task\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { openPopup } from \"../../redux/popup/reducer\";\r\nimport { completeTodo, deleteTodo } from \"../../redux/todo/reducer\";\r\nimport { setAlert } from \"../../redux/alert/reducer\";\r\nimport \"../todo-item/todo-item.css\";\r\n\r\nexport const TodoItem = ({ todo, setCurTodo, setCurId }) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleShowPopup = () => {\r\n\t\tdispatch(openPopup(true));\r\n\t\tsetCurTodo(todo.text);\r\n\r\n\t\tsetCurId(todo.id);\r\n\t};\r\n\r\n\tconst removeTask = () => {\r\n\t\tdispatch(\r\n\t\t\tsetAlert({\r\n\t\t\t\tmessage: \"Task removed! 🗑️\",\r\n\t\t\t\ttype: \"error\",\r\n\t\t\t}),\r\n\t\t);\r\n\t\tdispatch(deleteTodo(todo.id));\r\n\t};\r\n\r\n\tconst completeTask = () => {\r\n\t\tdispatch(completeTodo(todo));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='todo-item'>\r\n\t\t\t<li>\r\n\t\t\t\t<i onClick={completeTask} className='material-icons'>\r\n\t\t\t\t\t{todo.isCompleted ? \"done\" : \"panorama_fish_eye\"}\r\n\t\t\t\t</i>\r\n\t\t\t\t{todo.text}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<i\r\n\t\t\t\t\t\tonClick={handleShowPopup}\r\n\t\t\t\t\t\tclassName='material-icons close-item'\r\n\t\t\t\t\t\tstyle={{ marginRight: \"20px\" }}>\r\n\t\t\t\t\t\tedit\r\n\t\t\t\t\t</i>\r\n\t\t\t\t\t<i\r\n\t\t\t\t\t\tonClick={removeTask}\r\n\t\t\t\t\t\tclassName='material-icons close-item'>\r\n\t\t\t\t\t\tclose\r\n\t\t\t\t\t</i>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport { TodoItem } from \"../todo-item/TodoItem\";\r\nimport \"../todo-list/todo-list.css\";\r\n\r\n// const TODO = [\r\n//   {\r\n//     text: \" vue.js\",\r\n//     id: 1,\r\n//     comleted: false,\r\n//   },\r\n//   {\r\n//     text: \" react.js\",\r\n//     id: 2,\r\n//     comleted: false,\r\n//   },\r\n// ];\r\n\r\nexport const TodoList = ({\r\n  todo,\r\n  curTodo,\r\n  setCurTodo,\r\n  taskTextPopup,\r\n  setCurId,\r\n  handleShowPopup,\r\n}) => {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul>\r\n        {todo.map((item) => (\r\n          <TodoItem\r\n            todo={item}\r\n            key={item.id}\r\n            curTodo={curTodo}\r\n            setCurTodo={setCurTodo}\r\n            taskTextPopup={taskTextPopup}\r\n            setCurId={setCurId}\r\n            handleShowPopup={handleShowPopup}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Alert } from \"../components/alert/Alert\";\r\nimport { Popup } from \"../components/popup/Popup\";\r\nimport { TodoInput } from \"../components/todo-input/TodoInput\";\r\nimport { TodoList } from \"../components/todo-list/TodoList\";\r\nimport { setAlert } from \"../redux/alert/reducer\";\r\nimport { closePopup, openPopup } from \"../redux/popup/reducer\";\r\n\r\nimport { editTodo, setTodo } from \"../redux/todo/reducer\";\r\nimport \"./todo.css\";\r\n\r\nexport const Todo = () => {\r\n\tconst [taskText, setTaskText] = useState(\"\");\r\n\tconst [taskTextPopup, setTaskTextPopup] = useState(\"\");\r\n\tconst [curTodo, setCurTodo] = useState(\"\");\r\n\tconst [curId, setCurId] = useState();\r\n\tconst dispatch = useDispatch();\r\n\tconst items = useSelector((state) => state.todo.todos);\r\n\tconst popup = useSelector((state) => state.popup.popup);\r\n\tconst alerts = useSelector((state) => state.alert.alerts);\r\n\tconst [showAlert, setShowAlert] = useState(false);\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetTaskText(e.target.value);\r\n\t};\r\n\r\n\tconst handleInputChangePopup = (e) => {\r\n\t\tsetTaskTextPopup(e.target.value);\r\n\t};\r\n\r\n\tconst addTask = () => {\r\n\t\tconsole.log(\"curTodo\", curTodo);\r\n\r\n\t\tconst todoItem = {\r\n\t\t\ttext: taskText,\r\n\t\t\tid: Date.now(),\r\n\t\t\tisCompleted: false,\r\n\t\t};\r\n\t\tif (taskText.length > 0) {\r\n\t\t\tdispatch(setTodo(todoItem));\r\n\r\n\t\t\tsetShowAlert(true);\r\n\t\t\tdispatch(\r\n\t\t\t\tsetAlert({\r\n\t\t\t\t\tmessage: \"Task added! 🤗\",\r\n\t\t\t\t\ttype: \"success\",\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tsetShowAlert(true);\r\n\r\n\t\t\tdispatch(\r\n\t\t\t\tsetAlert({\r\n\t\t\t\t\tmessage: \"Add new task! 😩\",\r\n\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t}),\r\n\t\t\t);\r\n\t\t}\r\n\t\tsetTaskText(\"\");\r\n\r\n\t\tconsole.log(\"taskTextPopup--\", taskTextPopup);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='todo'>\r\n\t\t\t<Alert\r\n\t\t\t\tshow={showAlert}\r\n\t\t\t\talerts={alerts}\r\n\t\t\t\tsetShowAlert={setShowAlert}\r\n\t\t\t/>\r\n\t\t\t<TodoInput onChange={handleInputChange} value={taskText} />\r\n\t\t\t<TodoList\r\n\t\t\t\ttodo={items}\r\n\t\t\t\tcurTodo={curTodo}\r\n\t\t\t\tsetCurTodo={setCurTodo}\r\n\t\t\t\tsetCurId={setCurId}\r\n\t\t\t/>\r\n\t\t\t<Popup\r\n\t\t\t\tshow={popup}\r\n\t\t\t\tonChange={handleInputChangePopup}\r\n\t\t\t\tvalue={curTodo}\r\n\t\t\t\tsetCurTodo={setCurTodo}\r\n\t\t\t\ttextPopup={taskTextPopup}\r\n\t\t\t\tcurId={curId}\r\n\t\t\t/>\r\n\t\t\t<button onClick={addTask}>ADD TASK</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"./todo/reducer\";\r\nimport popupReducer from \"./popup/reducer\";\r\nimport alertReducer from \"./alert/reducer\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    todo: todoReducer,\r\n    popup: popupReducer,\r\n    alert: alertReducer,\r\n  },\r\n});\r\n","import { Provider } from \"react-redux\";\r\nimport { Todo } from \"./containers/Todo\";\r\nimport \"./App.css\";\r\nimport { store } from \"./redux\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <h1>TODO APP</h1>\r\n        <Todo />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}